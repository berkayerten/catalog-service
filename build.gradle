plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.7'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.polarbookshop'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}
ext {
    set('springCloudVersion', "2021.0.3")
    set('testContainersVersion', "1.17.3")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.retry:spring-retry'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.flywaydb:flyway-core'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation 'org.testcontainers:postgresql'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:${testContainersVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}
//to give bootRun a parameter and run in a specific env. like testdata for local development
bootRun {
    systemProperty 'spring.profiles.active', 'testdata'
}
//The Spring Boot Plugin task to build an OCI image using Buildpacks
bootBuildImage {
    imageName = "${project.name}" //The name of the OCI image to build. The name is the same one defined in the Gradle configuration for the project. Relying on the implicit “latest” tag
    environment = ["BP_JVM_VERSION" : "17.*"] //The JVM version to be installed in the image. It uses the latest Java 17 version.
    //Section to configure the connection with a container registry
    docker {
        //Section to configure authentication to the publishing container registry. The values are passed as Gradle properties.
        publishRegistry {
            username = project.findProperty("registryUsername")
            password = project.findProperty("registryToken")
            url = project.findProperty("registryUrl")
        }
    }
}